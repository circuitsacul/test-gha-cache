name: CI/CD

on:
  pull_request:
  push:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}
  REPO:  ${{ github.event.repository.name }}
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lints (clippy & fmt)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Install capnp
        run: |
          sudo apt-get update
          sudo apt-get install -y capnproto

      - name: Cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: rust-1.88

      - name: Install rust 1.88
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: 1.88.0
          components: clippy

      - name: Clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Install rust nightly
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt

      - name: Fmt
        run: cargo +nightly fmt --all -- --check

  build-and-push:
    name: Build & push (dev)
    runs-on: ubuntu-24.04
    if: >
      (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false) ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main')
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: test-gha-cache
            dockerfile: Dockerfile
            context: .
    steps:
      - uses: actions/checkout@v4

      - name: Compute tag
        id: tag
        shell: bash
        run: |
          set -euo pipefail
          short_sha="${GITHUB_SHA::7}"
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            tag="pr-${{ github.event.pull_request.number }}-${short_sha}"
          else
            tag="branch-main-${short_sha}"
          fi
          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "Computed tag: $tag"

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push ${{ matrix.name }}
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}-${{ matrix.name }}:${{ steps.tag.outputs.tag }}
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary
        if: always()
        shell: bash
        run: |
          image="${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}-${{ matrix.name }}"
          tag="${{ steps.tag.outputs.tag }}"
          {
            echo "### Docker image pushed"
            echo
            echo "- **${{ matrix.name }}** → \`${image}:${tag}\`"
            echo
            echo "**Pull:** \`docker pull ${image}:${tag}\`"
          } >> "$GITHUB_STEP_SUMMARY"

  release-images:
    name: Build & push (release)
    runs-on: ubuntu-24.04
    needs: [lint]
    if: github.event_name == 'release' && needs.lint.result == 'success'
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: test-gha-cache
            dockerfile: Dockerfile
            context: .
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push ${{ matrix.name }} (release)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}-${{ matrix.name }}:${{ github.event.release.tag_name }}
            ${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}-${{ matrix.name }}:latest
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary
        shell: bash
        run: |
          image="${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.REPO }}-${{ matrix.name }}"
          rel="${{ github.event.release.tag_name }}"
          {
            echo "### Docker images pushed (release)"
            echo
            echo "- **${{ matrix.name }}** → \`${image}:${rel}\`, \`${image}:latest\`"
            echo
            echo "**Pull:** \`docker pull ${image}:${rel}\`"
          } >> "$GITHUB_STEP_SUMMARY"
